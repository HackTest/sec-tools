#!/usr/bin/env python

# Copyright 2017, Ferry Boender.
# Licensed under the MIT license. For more information, see the LICENSE file.

import sys
import argparse
import logging
import json

import tools

__VERSION__ = "0.1"


def netstat_line_to_dict(line, annotations={}):
    """
    Convert a line from the output of `netstat -pant` to a dictionary.
    """
    elems = [elem for elem in line.split(" ") if elem != ""]

    try:
        proto = elems[0]
        recv_queue = elems[1]
        send_queue = elems[2]
        local_address = elems[3]
        remote_address = elems[4]
        state = elems[5]
        pid_prog = elems[6]

        ret = {
            "proto": proto,
            "recv_queue": int(recv_queue),
            "send_queue": int(send_queue),
            "local_address": local_address.rsplit(":", 1)[0],
            "local_port": local_address.rsplit(":", 1)[1],
            "remote_address": remote_address.rsplit(":", 1)[0],
            "remote_port": remote_address.rsplit(":", 1)[1],
            "state": state,
            "pid": None,
            "prog": None,
            "service": "Unknown",
            "verified": False,
        }

        if ret['local_port'] in annotations:
            ret.update(annotations[ret['local_port']])

        # Convert ports to int if possible
        try:
            ret["local_port"] = int(ret["local_port"])
        except ValueError:
            ret["local_port"] = 0

        try:
            ret["remote_port"] = int(ret["remote_port"])
        except ValueError:
            ret["remote_port"] = 0

        # Split the PID and the program
        if pid_prog != "-":
            ret["pid"] = int(pid_prog.split('/')[0])
            ret["prog"] = pid_prog.split('/')[1]
        return ret
    except (IndexError, ValueError):
        # Not a line with a listening service. Probably a header from netstat
        # or something.
        return None


def include_listenport(listenport, no_local=False, no_verified=False):
    """
    Return True if the port should be included in the output. False otherwise.
    """
    # Do not include things that are not ports
    if listenport is None:
        return False

    # Only include listening ports.
    if listenport['state'] != "LISTEN":
        return False

    # Do not include locally listening ports if requested
    if no_local is True and listenport["local_address"] == "127.0.0.1":
        return False

    # Do not include ports that have been verified if no_verified is True
    if no_verified is True and listenport.get("verified", False) is True:
        return False

    return True


def gather(no_local=False, annotate=None, no_verified=False):
    annotations = {}
    if annotate:
        annotations = json.load(open(annotate, 'r'))

    listenports = {}
    netstat_out = tools.cmd('netstat -pant')['stdout']
    for line in netstat_out.splitlines():
        listenport = netstat_line_to_dict(line, annotations)
        if include_listenport(listenport, no_local, no_verified):
            listenports[listenport['local_port']] = listenport

    return listenports


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Gather unix users')
    parser.add_argument('--version', action='version', version=__VERSION__)
    parser.add_argument('--debug', dest="debug", action='store_true', default=False, help="Show debug info")
    parser.add_argument('--annotate', dest="annotate", type=str, help="annotation file")
    parser.add_argument('--no-local', dest="no_local", action='store_true', default=False, help="No services listening locally")
    parser.add_argument('--no-verified', dest="no_verified", action='store_true', default=False, help="Don't include verified port")
    args = parser.parse_args()

    loglevel = logging.ERROR
    if args.debug is True:
        loglevel = logging.DEBUG
    logging.basicConfig(level=loglevel)

    listenports = gather(no_local=args.no_local, annotate=args.annotate,
                         no_verified=args.no_verified)

    sys.stdout.write(json.dumps({"listenports": listenports}, indent=4))
