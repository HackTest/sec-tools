#!/usr/bin/env python

#
# sec-gather-unixgroups
#
# Scan /etc/groups and output information of group memberships for users.
# Unlike sec-gather-unixusers, this tool is group-centric.
#
# Copyright 2017, Ferry Boender.
# Licensed under the MIT license. For more information, see the LICENSE file.
#

import sys
import json
import argparse
import logging
import tools
import pwd
import grp

__VERSION__ = "0.1"

html_tpl = """
<table>
    <tr>
        <th>Group</th>
        <th>Members</th>
    </tr>
    % for groupname in sorted(unixgroups.keys()):
        <%
        members = unixgroups[groupname]
        %>
        <tr>
            <td>${groupname}</td>
            <td>
                <ul>
                    % for username in members:
                        <li>${username}</li>
                    % endfor
                </ul>
            </td>
        </tr>
    % endfor
</table>
"""


def get_user_groups(username):
    groups = []

    # Get primary group
    p = pwd.getpwnam(username)
    groupname = grp.getgrgid(p.pw_gid).gr_name
    groups.append(groupname)

    # Get supplimentary groups
    for gr in grp.getgrall():
        if username in gr.gr_mem:
            groups.append(gr.gr_name)
    return groups

def gather(not_empty=True):
    # Gather users and their groups
    groups = {}
    for gr in grp.getgrall():
        if not_empty and len(gr.gr_mem) == 0:
            continue
        groups[gr.gr_name] = gr.gr_mem

    return groups


if __name__ == "__main__":
    formats = ['json', 'html']
    parser = argparse.ArgumentParser(description='Gather unix users')
    parser.add_argument('--version', action='version', version=__VERSION__)
    parser.add_argument('--debug', dest="debug", action='store_true', default=False, help="Show debug info")
    parser.add_argument('--format', dest="format", choices=formats, type=str, default="json", help="Output format")
    parser.add_argument('--not-empty', dest="not_empty", action='store_true', default=True, help="Only groups that are not empty")
    args = parser.parse_args()

    loglevel = logging.ERROR
    if args.debug is True:
        loglevel = logging.DEBUG
    logging.basicConfig(level=loglevel)

    unixgroups = gather(not_empty=args.not_empty)

    if args.format == 'json':
        sys.stdout.write(json.dumps({"unixgroups": unixgroups}, indent=4))
    elif args.format == 'html':
        sys.stdout.write(tools.tpl_str(html_tpl, unixgroups=unixgroups))
