#!/usr/bin/env python

# Copyright 2017, Ferry Boender.
# Licensed under the MIT license. For more information, see the LICENSE file.

import sys
import argparse
import json
import logging
import tools
import re

__VERSION__ = "0.1"

last_line_re = re.compile(
    "(?P<username>.*?)"
    "\s+"
    "(?P<tty>.*?)"
    "\s+"
    "(?P<remote_addr>.*?)"
    "\s+"
    "(?P<login_starttime>.*?)(   | - )"
    "(?P<login_endtime>.*?)\s*($|\()"
    "(?P<duration>.*?)(\)|$)"
    ".*"
)


html_tpl = """
<table>
    <tr>
        <th>Username</th>
        <th>TTY</th>
        <th>Remote Address</th>
        <th>Login start</th>
        <th>Login end</th>
        <th>Duration</th>
    </tr>
    % for session in unixsessions:
        <tr>
            <td>${session["username"]}</td>
            <td>${session["tty"]}</td>
            <td>${session["remote_addr"]}</td>
            <td>${session["login_starttime"]}</td>
            <td>${session["login_endtime"]}</td>
            <td>${session["duration"]}</td>
        </tr>
    % endfor
</table>
"""


def gather():
    last = tools.cmd("/usr/bin/last -F -w")

    sessions = []
    for line in last['stdout'].splitlines():
        match = last_line_re.match(line)
        if match:
            sessions.append(match.groupdict())
    return sessions


if __name__ == "__main__":
    formats = ['json', 'html']
    parser = argparse.ArgumentParser(description='Output unix login sessions')
    parser.add_argument('--version', action='version', version=__VERSION__)
    parser.add_argument('--debug', dest="debug", action='store_true', default=False, help="Show debug info")
    parser.add_argument('--format', dest="format", choices=formats, type=str, default="json", help="Output format")

    args = parser.parse_args()
    loglevel = logging.ERROR
    if args.debug is True:
        loglevel = logging.DEBUG
    logging.basicConfig(level=loglevel)

    unixsessions = gather()

    if args.format == 'json':
        sys.stdout.write(json.dumps({"unixsessions": unixsessions}, indent=4))
    elif args.format == 'html':
        sys.stdout.write(tools.tpl_str(html_tpl, unixsessions=unixsessions))
